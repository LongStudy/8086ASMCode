; Àý4.13


STACK       SEGMENT STACK 'STACK'
            DW 100H DUP(?)
TOP         LABEL WORD
STACK       ENDS
DATA        SEGMENT
KEYBUFFER	DB 100
			DB 0
			DB 100 DUP(0)
STRING1		DB 'PLEASE INPUT DATA: $'
DATA		ENDS
CODE		SEGMENT
			ASSUME CS:CODE,DS:DATA,ES:DATA,SS:STACK

START:
		MOV AX,DATA
		MOV DS,AX
		MOV ES,AX
		MOV AX,STACK
		MOV SS,AX
		LEA SP,TOP
		
		LEA DX,STRING1
		MOV AH,09H
		INT 21H
		MOV AH,0AH
		LEA DX,KEYBUFFER
		INT 21H
		MOV AH,0AH
		LEA SI,KEYBUFFER+1 
		CALL TARS10TO16
		CALL DISPCR
		CALL DISPAX
		CALL DISPCR
		MOV AX,BX
		CALL DISPAX
		MOV AH,4CH
		MOV AL,0
		INT 21H
		
DISPAL	PROC NEAR
        PUSH AX
		PUSH CX
		PUSH DX
		PUSH AX
		MOV CL,4
		SHR AL,CL
		CALL CHANG
		MOV AH,02
		MOV DL,AL
		INT 21H
		POP AX
		AND AL,0FH
		CALL CHANG
		MOV AH,02
		MOV DL,AL
		INT 21H
		POP DX
		POP CX
		POP AX
		RET
DISPAL	ENDP

CHANG PROC NEAR	
		CMP AL,10
		JNGE CHANG1
		ADD AL,7
CHANG1:
		ADD AL,30H
		RET
CHANG ENDP

DISPAX PROC NEAR
		XCHG AL,AH
		CALL DISPAL
		XCHG AH,AL
		CALL DISPAL
		RET
DISPAX ENDP
		

DISPCR	PROC NEAR
		PUSH AX
		PUSH DX
		MOV AH,2
		MOV DL,0AH
		INT 21H
		MOV AH,2
		MOV DL,0DH
		INT 21H
		POP DX
		POP AX
		RET
DISPCR	ENDP

TARS10TO16	PROC NEAR
			PUSH CX
			PUSH DX
			PUSH SI
			XOR AX,AX
			XOR CX,CX
			MOV CL,[SI]
			INC SI
			MOV AL,[SI]
			INC SI
			SUB AL,30H
			DEC CX
			JCXZ TRANSF2
			MOV BX,10
TRANSF1:
		MUL BX
		JC TRANSF_ERR
		MOV DL,[SI]
		INC SI
		SUB DL,30H
		ADD AL,DL
		ADC AH,0
		JC TRANSF_ERR
		LOOP TRANSF1
TRANSF2:
		MOV BX,0
		JMP TRANSF_OK
TRANSF_ERR:
		MOV BX,-1
TRANSF_OK:
		POP SI
		POP DX
		POP CX
		RET
TARS10TO16 ENDP
	
CODE 	ENDS
		END START



















